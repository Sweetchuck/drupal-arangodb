<?php

/**
 * @file
 * Install/uninstall hooks.
 */

declare(strict_types = 1);

use ArangoDBClient\CollectionHandler as ArangoDbCollectionHandler;
use Drupal\arangodb\Utils;
use Drupal\Core\Cache\Cache;

/**
 * Implements hook_requirements().
 *
 * @phpstan-param drupal-core-requirements-phase $phase
 *
 * @phpstan-return array<string, drupal-core-requirement>
 */
function arangodb_requirements($phase): array {
  $return = [];

  if ($phase === 'runtime') {
    $binMapping = Utils::groupCacheBinsByConnections(Cache::getBins());
    foreach ($binMapping as $connectionId => $info) {
      /** @var \ArangoDBClient\Connection $connection */
      $connection = $info['connection'];
      $collectionHandler = new ArangoDbCollectionHandler($connection);
      $uri = Utils::connectionUri($connection->getOptions());

      $return["arangodb_connection_{$connectionId}"] = [
        'severity' => REQUIREMENT_OK,
        'title' => t('ArangoDB: Connection OK'),
        'value' => $uri,
        'description' => [
          '#theme' => 'item_list',
          '#title' => t('Affected cache bins'),
          '#items' => $info['binNames'],
        ],
      ];

      try {
        // @todo May that collection is not exists yet.
        $collectionHandler->count(reset($info['binNames']));
      }
      catch (\Throwable $exception) {
        $return["arangodb_connection_{$connectionId}"]['severity'] = REQUIREMENT_ERROR;
        $return["arangodb_connection_{$connectionId}"]['title'] = t('ArangoDB: Connection failed');
        $return["arangodb_connection_{$connectionId}"]['value'] .= ' | ' . $exception->getMessage();
      }
    }
  }

  return $return;
}
